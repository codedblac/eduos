# Generated by Django 5.2.1 on 2025-07-14 21:42

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0002_initial'),
        ('classes', '0001_initial'),
        ('institutions', '0001_initial'),
        ('subjects', '0001_initial'),
        ('teachers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PeriodTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=9)),
                ('period_number', models.PositiveSmallIntegerField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('class_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='period_templates', to='classes.classlevel')),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='period_templates', to='institutions.institution')),
            ],
            options={
                'ordering': ['class_level', 'day', 'period_number'],
                'unique_together': {('institution', 'class_level', 'day', 'period_number')},
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('capacity', models.PositiveIntegerField(blank=True, null=True)),
                ('is_lab', models.BooleanField(default=False)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='institutions.institution')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'institution')},
            },
        ),
        migrations.CreateModel(
            name='TeacherAvailabilityOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('reason', models.TextField(blank=True)),
                ('allowed_to_substitute', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stream', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='classes.stream')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_exceptions', to='teachers.teacher')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='TimetableEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('period_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='timetable.periodtemplate')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='timetable_entries', to='timetable.room')),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_entries', to='classes.stream')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_entries', to='subjects.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_entries', to='teachers.teacher')),
            ],
            options={
                'ordering': ['period_template__day', 'period_template__start_time'],
            },
        ),
        migrations.CreateModel(
            name='TimetableChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_type', models.CharField(choices=[('created', 'Created'), ('modified', 'Modified'), ('rescheduled', 'Rescheduled'), ('cancelled', 'Cancelled')], max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('changed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='change_logs', to='timetable.timetableentry')),
            ],
        ),
        migrations.CreateModel(
            name='TimetableNotificationSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_reminders', models.BooleanField(default=True)),
                ('reminder_lead_time_minutes', models.PositiveIntegerField(default=10)),
                ('notify_channels', models.JSONField(default=list)),
                ('daily_overview_enabled', models.BooleanField(default=True)),
                ('institution', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_settings', to='institutions.institution')),
            ],
        ),
        migrations.CreateModel(
            name='TimetableVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_finalized', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.academicyear')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_versions', to='institutions.institution')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academics.term')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='timetableentry',
            name='version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='timetable.timetableversion'),
        ),
        migrations.CreateModel(
            name='SubjectAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lessons_per_week', models.PositiveSmallIntegerField()),
                ('is_substitutable', models.BooleanField(default=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_assignments', to='institutions.institution')),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_assignments', to='classes.stream')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='subjects.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='teachers.teacher')),
            ],
            options={
                'ordering': ['stream', 'subject'],
                'unique_together': {('teacher', 'subject', 'stream', 'institution')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='timetableentry',
            unique_together={('version', 'period_template', 'stream')},
        ),
    ]
